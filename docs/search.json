[{"path":[]},{"path":"/articles/create-tsd.html","id":"timerastdata-based-on-raster-data","dir":"Articles","previous_headings":"Create the TSD-data","what":"TimeRastData based on Raster data","title":"Create TSD","text":"two ways create TimeRastData, either read Raster-Cluster (multi-layers) array terra::SpatRaster:","code":""},{"path":"/articles/create-tsd.html","id":"load-data","dir":"Articles","previous_headings":"Create the TSD-data > TimeRastData based on Raster data","what":"Load data","title":"Create TSD","text":"tutorial convert three days meteorological data (potential ET) ReKIS TSD-data, original data saved one raster format ASC-format.","code":"## get the file path and names of raster data (in .asc) fp_Extdata <- system.file(\"extdata\", package = \"TimeSpatData\")  fn_Asc <-  list.files(fp_Extdata, \".asc\")  ## read data into SpatRaster and array rast_ET <- rast(file.path(fp_Extdata, fn_Asc[1:3]))  # the first six lines are the metadata ary_ET <- as.array(rast_ET)  ## check the data: rast_ET  #> class       : SpatRaster  #> dimensions  : 190, 240, 3  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 4480000, 4720000, 5550000, 5740000  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> sources     : ET_1961-01-01.asc   #>               ET_1961-01-02.asc   #>               ET_1961-01-03.asc   #> names       : ET_1961-01-01, ET_1961-01-02, ET_1961-01-03 str(ary_ET) #>  num [1:190, 1:240, 1:3] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ..."},{"path":"/articles/create-tsd.html","id":"from-array-to-timerastdata","dir":"Articles","previous_headings":"Create the TSD-data > TimeRastData based on Raster data","what":"From array to TimeRastData","title":"Create TSD","text":"convention TSD-Data define fest order dimensions, therefor dimension array must consistent like aim TSD-Data stay. TSD-data anfordert always geological information (Spat), array data class can’t save geological data, need still set arguments Spat_EPSG Spat_extent: dimension Time just need convert timestempal Date lubridate NOTE: TSD-Data define y-Aches always SMALL BIG, raster data save north south, y-value ist big small. Therefor need adjust dimension. method first recognized, can easy deal huge data.","code":"## reform the array ary_ET_reformed <- ary_ET[190:1,,] |> aperm(c(3,2,1))  ## get the geological info ext_Template <- ext(rast_ET)  ## convert to TSD tsd_ET_a <- new_TimeRastVariable(ary_ET_reformed, # data                                \"ET\", \"mm/d\", # name and unit                                as_date(c(\"1961-01-01\", \"1961-01-02\", \"1961-01-03\")), # time                                31468, ext_Template) # Spat #> The reselutions are: #> x: 1000 #> y: 1000 #> They will not be checked, please make sure they are correct.  ## check str(tsd_ET_a) #>  'TimeRastVariable' num [1:3, 1:240, 1:190] 0.3 0.3 0.3 0.3 0.3 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ : chr [1:3] \"1961-01-01\" \"1961-01-02\" \"1961-01-03\" #>   ..$ : NULL #>   ..$ : NULL #>  - attr(*, \"Name\")= chr \"ET\" #>  - attr(*, \"Unit\")= Units: [mm/d] num 1 #>  - attr(*, \"Time\")= Date[1:3], format: \"1961-01-01\" \"1961-01-02\" ... #>  - attr(*, \"Spat_crs\")= num 31468 #>  - attr(*, \"Spat_extent\")=Formal class 'SpatExtent' [package \"terra\"] with 1 slot #>   .. ..@ ptr:Reference class 'Rcpp_SpatExtent' [package \"terra\"] with 2 fields #>   .. .. ..$ valid : logi TRUE #>   .. .. ..$ vector: num [1:4] 4480000 4720000 5550000 5740000 #>   .. .. ..and 28 methods, of which 14 are  possibly relevant: #>   .. .. ..  align, as.points, ceil, compare, deepcopy, finalize, floor, #>   .. .. ..  initialize, intersect, round, sample, sampleRandom, sampleRegular, #>   .. .. ..  union"},{"path":"/articles/create-tsd.html","id":"from-spatraster-to-timerastdata","dir":"Articles","previous_headings":"Create the TSD-data > TimeRastData based on Raster data","what":"From SpatRaster to TimeRastData","title":"Create TSD","text":"second method recognized data contain many time step Time dimension.","code":"## add the crs infomation to the data, this depend on wether the raster-file contain this infomation,  ## when es contauin this info in original, then this step is not necessery crs(rast_ET) <- \"EPSG:31468\" ## convert to TSD tsd_ET_r <- new_TimeRastVariable(rast_ET, # data                                \"ET\", \"mm/d\", # name and unit                                as_date(c(\"1961-01-01\", \"1961-01-02\", \"1961-01-03\"))) # time  ## check str(tsd_ET_r) #>  'TimeRastVariable' num [1:3, 1:240, 1:190] 0.3 0.3 0.3 0.3 0.3 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ : chr [1:3] \"1961-01-01\" \"1961-01-02\" \"1961-01-03\" #>   ..$ : NULL #>   ..$ : NULL #>  - attr(*, \"Name\")= chr \"ET\" #>  - attr(*, \"Unit\")= Units: [mm/d] num 1 #>  - attr(*, \"Time\")= Date[1:3], format: \"1961-01-01\" \"1961-01-02\" ... #>  - attr(*, \"Spat_crs\")= chr \"31468\" #>  - attr(*, \"Spat_extent\")=Formal class 'SpatExtent' [package \"terra\"] with 1 slot #>   .. ..@ ptr:Reference class 'Rcpp_SpatExtent' [package \"terra\"] with 2 fields #>   .. .. ..$ valid : logi TRUE #>   .. .. ..$ vector: num [1:4] 4480000 4720000 5550000 5740000 #>   .. .. ..and 28 methods, of which 14 are  possibly relevant: #>   .. .. ..  align, as.points, ceil, compare, deepcopy, finalize, floor, #>   .. .. ..  initialize, intersect, round, sample, sampleRandom, sampleRegular, #>   .. .. ..  union"},{"path":"/articles/create-tsd.html","id":"timevectdata-based-on-vector-and-table-data","dir":"Articles","previous_headings":"Create the TSD-data","what":"TimeVectData based on Vector (and table) data","title":"Create TSD","text":"Compare raster data, vector data save always geometric data, time-based data saved separated data. Therefor parties always needed create TimeVectData.","code":""},{"path":"/articles/create-tsd.html","id":"load-data-1","dir":"Articles","previous_headings":"Create the TSD-data > TimeVectData based on Vector (and table) data","what":"Load data","title":"Create TSD","text":"polygons Catchments “Mulde” “Speree” Saxony, German download iDA (interdisziplinäre Daten und Auswertungen) GPKG-Format reformed.","code":"## load polygon polygon_SAX <- vect(file.path(fp_Extdata, \"shp_SAX_EZG.gpkg\"))  ## random array data ary_Q <- array(runif(10, 0, 6), c(5, 2)) # random number for two `Spat` (polygons) and five `Time` (time steps)"},{"path":"/articles/create-tsd.html","id":"from-spatvector-and-array-to-timevectdata","dir":"Articles","previous_headings":"Create the TSD-data > TimeVectData based on Vector (and table) data","what":"From SpatVector and array to TimeVectData","title":"Create TSD","text":"NOTE: Spat_Data MUST contain attribute “Spat_ID”","code":"## convert to TSD tsd_Q_v <- new_TimeVectVariable(ary_Q, # data                                \"Q\", \"m3/s\", # name and unit                                as_date(c(\"1961-01-01\", \"1961-01-02\", \"1961-01-03\", \"1961-01-04\", \"1961-01-05\")), # time                                c(\"PID560051\", \"PID582820\"), # Spat_ID                                polygon_SAX) # Spat data, that must contain the attribute \"Spat_ID\"  ## check str(tsd_Q_v) #>  'TimeVectVariable' num [1:5, 1:2] 1.745 1.505 0.536 1.468 0.676 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:5] \"1961-01-01\" \"1961-01-02\" \"1961-01-03\" \"1961-01-04\" ... #>   ..$ : chr [1:2] \"PID560051\" \"PID582820\" #>  - attr(*, \"Name\")= chr \"Q\" #>  - attr(*, \"Unit\")= Units: [m3/s] num 1 #>  - attr(*, \"Time\")= Date[1:5], format: \"1961-01-01\" \"1961-01-02\" ... #>  - attr(*, \"Spat_ID\")= chr [1:2] \"PID560051\" \"PID582820\" #>  - attr(*, \"Spat_Data\")=Formal class 'PackedSpatVector' [package \"terra\"] with 5 slots #>   .. ..@ type       : chr \"polygons\" #>   .. ..@ crs        : chr \"PROJCRS[\\\"ETRS89 / UTM zone 33N\\\",\\n    BASEGEOGCRS[\\\"ETRS89\\\",\\n        DATUM[\\\"European Terrestrial Reference\"| __truncated__ #>   .. ..@ coordinates: num [1:16478, 1:2] 368467 368393 368290 368206 368109 ... #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : NULL #>   .. .. .. ..$ : chr [1:2] \"x\" \"y\" #>   .. ..@ index      : num [1:2, 1:4] 1 2 1 1 0 ... #>   .. .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. .. ..$ : NULL #>   .. .. .. ..$ : chr [1:4] \"geom\" \"part\" \"hole\" \"start\" #>   .. ..@ attributes :'data.frame':   2 obs. of  1 variable: #>   .. .. ..$ Spat_ID: chr [1:2] \"PID560051\" \"PID582820\""},{"path":"/articles/TimeSpatData.html","id":"create-from-other-form","dir":"Articles","previous_headings":"","what":"Create from other form","title":"TimeSpatData","text":"Article -> vignette(\"create-tsd\") <- click Vignette way:","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/vignette-tsd.html","id":"timerastdata-based-on-raster-data","dir":"Articles","previous_headings":"Create the TSD-data","what":"TimeRastData based on Raster data","title":"vignette-tsd","text":"two ways create TimeRastData, either read Raster-Cluster (multi-layers) array terra::SpatRaster:","code":""},{"path":"/articles/vignette-tsd.html","id":"load-the-data","dir":"Articles","previous_headings":"Create the TSD-data > TimeRastData based on Raster data","what":"Load the data","title":"vignette-tsd","text":"tutorial convert three days meteorological data (potential ET) ReKIS TSD-data, original data saved one raster format ASC-format.","code":"## get the file path and names of raster data (in .asc) fp_Extdata <- system.file(\"extdata\", package = \"TimeSpatData\")  fn_Asc <-  list.files(fp_Extdata, \".asc\")  ## read data into SpatRaster and array rast_ET <- rast(file.path(fp_Extdata, fn_Asc[1:3]))  # the first six lines are the metadata ary_ET <- as.array(rast_ET)  ## check the data: rast_ET  #> class       : SpatRaster  #> dimensions  : 190, 240, 3  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 4480000, 4720000, 5550000, 5740000  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> sources     : ET_1961-01-01.asc   #>               ET_1961-01-02.asc   #>               ET_1961-01-03.asc   #> names       : ET_1961-01-01, ET_1961-01-02, ET_1961-01-03 str(ary_ET) #>  num [1:190, 1:240, 1:3] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ..."},{"path":"/articles/vignette-tsd.html","id":"from-array-to-timerastdata","dir":"Articles","previous_headings":"Create the TSD-data > TimeRastData based on Raster data","what":"From array to TimeRastData","title":"vignette-tsd","text":"convention TSD-Data define fest order dimensions, therefor dimension array must consistent like aim TSD-Data stay. TSD-data anfordert always geological information (Spat), array data class can’t save geological data, need still set arguments Spat_EPSG Spat_extent: dimension Time just need convert timestempal Date lubridate NOTE: TSD-Data define y-Aches always SMALL BIG, raster data save north south, y-value ist big small. Therefor need adjust dimension. method first recognized, can easy deal huge data.","code":"## reform the array ary_ET_reformed <- ary_ET[190:1,,] |> aperm(c(3,2,1))  ## get the geological info ext_Template <- ext(rast_ET)  ## convert to TSD tsd_ET_a <- new_TimeRastVariable(ary_ET_reformed, # data                                \"ET\", \"mm/d\", # name and unit                                as_date(c(\"1961-01-01\", \"1961-01-02\", \"1961-01-03\")), # time                                31468, ext_Template) # Spat #> The reselutions are: #> x: 1000 #> y: 1000 #> They will not be checked, please make sure they are correct.  ## check str(tsd_ET_a) #>  'TimeRastVariable' num [1:3, 1:240, 1:190] 0.3 0.3 0.3 0.3 0.3 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ : chr [1:3] \"1961-01-01\" \"1961-01-02\" \"1961-01-03\" #>   ..$ : NULL #>   ..$ : NULL #>  - attr(*, \"Name\")= chr \"ET\" #>  - attr(*, \"Unit\")= Units: [mm/d] num 1 #>  - attr(*, \"Time\")= Date[1:3], format: \"1961-01-01\" \"1961-01-02\" ... #>  - attr(*, \"Spat_crs\")= num 31468 #>  - attr(*, \"Spat_extent\")=Formal class 'SpatExtent' [package \"terra\"] with 1 slot #>   .. ..@ ptr:Reference class 'Rcpp_SpatExtent' [package \"terra\"] with 2 fields #>   .. .. ..$ valid : logi TRUE #>   .. .. ..$ vector: num [1:4] 4480000 4720000 5550000 5740000 #>   .. .. ..and 28 methods, of which 14 are  possibly relevant: #>   .. .. ..  align, as.points, ceil, compare, deepcopy, finalize, floor, #>   .. .. ..  initialize, intersect, round, sample, sampleRandom, sampleRegular, #>   .. .. ..  union"},{"path":"/articles/vignette-tsd.html","id":"from-spatraster-to-timerastdata","dir":"Articles","previous_headings":"Create the TSD-data > TimeRastData based on Raster data","what":"From SpatRaster to TimeRastData","title":"vignette-tsd","text":"second method recognized data contain many time step Time dimension.","code":"## add the crs infomation to the data, this depend on wether the raster-file contain this infomation,  ## when es contauin this info in original, then this step is not necessery crs(rast_ET) <- \"EPSG:31468\" ## convert to TSD tsd_ET_r <- new_TimeRastVariable(rast_ET, # data                                \"ET\", \"mm/d\", # name and unit                                as_date(c(\"1961-01-01\", \"1961-01-02\", \"1961-01-03\"))) # time  ## check str(tsd_ET_r) #>  'TimeRastVariable' num [1:3, 1:240, 1:190] 0.3 0.3 0.3 0.3 0.3 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ : chr [1:3] \"1961-01-01\" \"1961-01-02\" \"1961-01-03\" #>   ..$ : NULL #>   ..$ : NULL #>  - attr(*, \"Name\")= chr \"ET\" #>  - attr(*, \"Unit\")= Units: [mm/d] num 1 #>  - attr(*, \"Time\")= Date[1:3], format: \"1961-01-01\" \"1961-01-02\" ... #>  - attr(*, \"Spat_crs\")= chr \"31468\" #>  - attr(*, \"Spat_extent\")=Formal class 'SpatExtent' [package \"terra\"] with 1 slot #>   .. ..@ ptr:Reference class 'Rcpp_SpatExtent' [package \"terra\"] with 2 fields #>   .. .. ..$ valid : logi TRUE #>   .. .. ..$ vector: num [1:4] 4480000 4720000 5550000 5740000 #>   .. .. ..and 28 methods, of which 14 are  possibly relevant: #>   .. .. ..  align, as.points, ceil, compare, deepcopy, finalize, floor, #>   .. .. ..  initialize, intersect, round, sample, sampleRandom, sampleRegular, #>   .. .. ..  union"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kan Lei. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lei K (2023). TimeSpatData: Time-Spatial data. https://github.com/LuckyKanLei/TimeSpatData, https://luckykanlei.github.io/TimeSpatData/.","code":"@Manual{,   title = {TimeSpatData: Time-Spatial data},   author = {Kan Lei},   year = {2023},   note = {https://github.com/LuckyKanLei/TimeSpatData, https://luckykanlei.github.io/TimeSpatData/}, }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"macro-dimensions-dim","dir":"","previous_headings":"","what":"Macro dimensions (Dim)","title":"Time-Spatial data","text":"macro perspective, TimeSpatData always defined three dimensions: Time: timestamps Spat: spatial Vari: multiple variables However, Spat dimension actually different complex form, based geological data raster vector. vertical direction, support layer dimension version. physical vertical dimension like x y, rather extracted layer homogeneous layer.","code":""},{"path":"/index.html","id":"data-array-dimensions-dim","dir":"","previous_headings":"","what":"Data (array) dimensions (dim)","title":"Time-Spatial data","text":"data-processing -storage, data always given array form, macro dimensions clearly defined array dimension, therefore array dimensions redefined:","code":""},{"path":"/index.html","id":"time","dir":"","previous_headings":"Data (array) dimensions (dim)","what":"time","title":"Time-Spatial data","text":"Dimension time defined time backward consistency. always stands first dimension, two possible options: continuous: fixed time step, defined units original_time discrete: Without concept time step, always giving exact timestamps","code":""},{"path":"/index.html","id":"spat-in-horizontal","dir":"","previous_headings":"Data (array) dimensions (dim)","what":"spat in horizontal","title":"Time-Spatial data","text":"Dimension spat defined vector spatial data (points, lines, polygons). ordinal, linked Spat_ID Spat_Data variables. coordinate reference system (CRS) defined using EPSG-code.","code":""},{"path":"/index.html","id":"x-und-y-in-horizontal","dir":"","previous_headings":"Data (array) dimensions (dim)","what":"x und y in horizontal","title":"Time-Spatial data","text":"Die beide Dimensionen sind für Raster (einzeln Schichten) horizontal Koordinate definiert mit die Koordinaten-Werten von zentralen Punkten des Zells. Das CRS ist mit EPSG-code definiert. Deshalb ist es nicht erlaubt die Einheit oder andere zusätzliche Sachen von den beiden Dimensionen zu definieren. two dimensions x y defined raster data single layers. represent horizontal coordinates central points cells raster. coordinate reference system (CRS) defined using EPSG-code. allowed define units additional information dimensions.","code":""},{"path":"/index.html","id":"layer-in-vertical","dir":"","previous_headings":"Data (array) dimensions (dim)","what":"layer in vertical","title":"Time-Spatial data","text":"Dimension layer defined conceptual layer without exact vertical position.","code":""},{"path":"/index.html","id":"vari","dir":"","previous_headings":"Data (array) dimensions (dim)","what":"vari","title":"Time-Spatial data","text":"Dimension vari defined multiple corresponding variables Name Unit. dimension always stands last.","code":""},{"path":"/index.html","id":"data-type-name","dir":"","previous_headings":"","what":"Data type (name)","title":"Time-Spatial data","text":"Spat Due variety spatial data forms, four Spat-Form listed : Vect [spat]: Vector data (points, lines, polygons) VectLayer [spat, layer]: Vector data multiple layers Rast [x, y]: Raster data single layer RastLayer [x, y, layer]: Raster data multiple layers Vari Due different properties variables, following four Vari-Form defined: Vari [vari = 1] / []: single variable Array [vari]: multiple variables data-structure -size summary, complete TimeSpatData must define three macro dimensions (data dimensions).","code":""},{"path":"/index.html","id":"timespatdata-in-netcdf","dir":"","previous_headings":"","what":"TimeSpatData in NetCDF","title":"Time-Spatial data","text":"definition dimensions NetCDF remains data structure dimensions described . Due limits NetCDF, also necessary define additional dimensions, variables, attributes.","code":""},{"path":"/index.html","id":"processing-tools","dir":"","previous_headings":"","what":"Processing Tools","title":"Time-Spatial data","text":"TSD structure, four main tools: read, write, crop, extract. details, see section read_tsd(), write_tsd(), crop_tsd() extract_tsd().","code":""},{"path":"/reference/coalesce_tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"coalesce TimeSpatData (Layer-Dimension) — coalesce_tsd","title":"coalesce TimeSpatData (Layer-Dimension) — coalesce_tsd","text":"Finds first non-missing value position (Raster grid, Polygon, Line Point) Layer-Dimension. NOTE: function can used TimeVectLayerVariable TimeRastLayerVariable.","code":""},{"path":"/reference/coalesce_tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"coalesce TimeSpatData (Layer-Dimension) — coalesce_tsd","text":"","code":"coalesce_tsd(tsd_Data)  # S3 method for TimeVectLayerVariable coalesce_tsd(tsd_Data)  # S3 method for TimeRastLayerVariable coalesce_tsd(tsd_Data)"},{"path":"/reference/coalesce_tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"coalesce TimeSpatData (Layer-Dimension) — coalesce_tsd","text":"tsd_Data TimeSpatData data TimeVectLayerVariable TimeRastLayerVariable","code":""},{"path":"/reference/crop_tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"crop TimeSpatData (Spat-Dimension) — crop_tsd","title":"crop TimeSpatData (Spat-Dimension) — crop_tsd","text":"Crop (mask) TimeSpatData new TimeSpatData. Every time can one Polygon mask_Area. TimeVectData polygons, lines oder points mit mask_Area first intersect terra::intersect polygons, lines oder points mask_Area exported. TimeRastData TimeRastLayerData spatial dimension first crop terra::crop terra::mask raster-cells NA setted, mask_Area. Crop (mask) TimeSpatData create new TimeSpatData. Every time function used, one polygon can used mask_Area. TimeVectData, polygons, lines, points intersected mask_Area using terra::intersect, polygons, lines, points within mask_Area exported. TimeRastData, spatial dimension cropped using terra::crop masked using terra::mask. Raster cells within mask_Area set NA.","code":""},{"path":"/reference/crop_tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"crop TimeSpatData (Spat-Dimension) — crop_tsd","text":"","code":"crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeVectVariable crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeVectArray crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeVectLayerVariable crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeVectLayerArray crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeRastVariable crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeRastArray crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeRastLayerVariable crop_tsd(tsd_Data, mask_Area)  # S3 method for TimeRastLayerArray crop_tsd(tsd_Data, mask_Area)"},{"path":"/reference/crop_tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"crop TimeSpatData (Spat-Dimension) — crop_tsd","text":"tsd_Data TimeSpatData data TimeVectVariable TimeVectArray TimeRastVariable TimeRastArray TimeRastLayerVariable TimeRastLayerArray mask_Area (SpatVector) one Polygon, terra::vect()","code":""},{"path":"/reference/extract_tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"extract TimeSpatData (Spat-Dimension) — extract_tsd","title":"extract TimeSpatData (Spat-Dimension) — extract_tsd","text":"Extract TimeSpatData TimeVectData. theory terra::extract, TimeVectData TimeRastData extracted using weighted average given polygons (mask_area). weight calculated based area polygons raster cells within mask_area. NOTE: function can used values make sense weighted average. \\[\\vec{\\Omega}_{[time,region]} = \\vec{}_{[time,grid]} \\cdot \\vec{W}_{[grid,region]}\\] \\(\\vec{\\Omega}_{[time,region]}\\) area mean EZG (mat_value_region), \\(\\vec{}_{[time,grid]}\\) Grid values time step (mat_value) \\(\\vec{W}_{[grid,region]}\\) area fraction cell RU (mat_weight).","code":""},{"path":"/reference/extract_tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract TimeSpatData (Spat-Dimension) — extract_tsd","text":"","code":"extract_tsd(tsd_Data, mask_area)  # S3 method for TimeVectVariable extract_tsd(tsd_Data, mask_area)  # S3 method for TimeVectArray extract_tsd(tsd_Data, mask_area)  # S3 method for TimeVectLayerVariable extract_tsd(tsd_Data, mask_area)  # S3 method for TimeVectLayerArray extract_tsd(tsd_Data, mask_area)  # S3 method for TimeRastVariable extract_tsd(tsd_Data, mask_area)  # S3 method for TimeRastArray extract_tsd(tsd_Data, mask_area)  # S3 method for TimeRastLayerVariable extract_tsd(tsd_Data, mask_area)  # S3 method for TimeRastLayerArray extract_tsd(tsd_Data, mask_area)"},{"path":"/reference/extract_tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract TimeSpatData (Spat-Dimension) — extract_tsd","text":"tsd_Data TimeSpatData data TimeVectVariable TimeVectArray TimeRastVariable TimeRastArray mask_area (SpatVector) Polygons, terra::vect()","code":""},{"path":"/reference/read_tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"read TimeSpatData — read_tsd","title":"read TimeSpatData — read_tsd","text":"Read TimeSpatData nc-file, writed write_tsd(), write tools follow TimeSpatData convention.","code":""},{"path":"/reference/read_tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read TimeSpatData — read_tsd","text":"","code":"read_tsd(fn_, start = NA, count = NA)"},{"path":"/reference/read_tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read TimeSpatData — read_tsd","text":"fn_ (char) filenames start, count (num) start count od data block, see function ncdf4::ncvar_get()","code":""},{"path":"/reference/read_tsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read TimeSpatData — read_tsd","text":"TimeSpatData data TimeVectVariable TimeVectArray TimeRastVariable TimeRastArray TimeRastLayerVariable TimeRastLayerArray","code":""},{"path":"/reference/subset.html","id":null,"dir":"Reference","previous_headings":"","what":"get the TimeSpatVariable from TimeSpatArray — subset","title":"get the TimeSpatVariable from TimeSpatArray — subset","text":"get variable TimeSpatArray TimeSpatVariable name: TimeVectArray TimeVectVariable TimeRastArray TimeRastVariable TimeRastLayerArray TimeRastLayerVariable","code":""},{"path":"/reference/subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the TimeSpatVariable from TimeSpatArray — subset","text":"","code":"# S3 method for TimeVectArray [[(data_, name)  # S3 method for TimeRastArray [[(data_, name)  # S3 method for TimeRastLayerArray [[(data_, name)"},{"path":"/reference/subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the TimeSpatVariable from TimeSpatArray — subset","text":"data_ (TimeSpatArray) data TimeVectArray, TimeRastArray TimeRastLayerArray name (char) name od variable","code":""},{"path":"/reference/subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the TimeSpatVariable from TimeSpatArray — subset","text":"TimeSpatVariable data","code":""},{"path":"/reference/summary_time_tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"summarize TimeSpatData in Time-Dimension — summary_time_tsd","title":"summarize TimeSpatData in Time-Dimension — summary_time_tsd","text":"summary_time_tsd summarize Time-Dimension fixed time interval like yearly, monthly summary_index_tsd summarize Time-Dimension flexibel time interval, use parameter idx_End divide interval","code":""},{"path":"/reference/summary_time_tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summarize TimeSpatData in Time-Dimension — summary_time_tsd","text":"","code":"summary_time_tsd(tsd_Data, str_Interval = \"years\", smry_Funct = mean, ...)  summary_index_tsd(tsd_Data, idx_End, smry_Funct = mean, ...)"},{"path":"/reference/summary_time_tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summarize TimeSpatData in Time-Dimension — summary_time_tsd","text":"tsd_Data TimeSpatData data TimeVectVariable TimeVectArray TimeRastVariable TimeRastArray str_Interval (string) <“microseconds”, “milliseconds”, “seconds”, “minutes”, “hours”, “days”, “weeks”, “months”, “quarters” “years”> time interval smry_Funct (function) function used summary, e.g. mean, max min, can also self-defined function ... parameters smry_Funct idx_End (integer) index end points every interval","code":""},{"path":"/reference/summary_time_tsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summarize TimeSpatData in Time-Dimension — summary_time_tsd","text":"summarized time series data structure like tsd_Data","code":""},{"path":"/reference/TimeRastData.html","id":null,"dir":"Reference","previous_headings":"","what":"create TimeRastVariable and TimeRastArray data — TimeRastData","title":"create TimeRastVariable and TimeRastArray data — TimeRastData","text":"TimeRastVariable data class based 3D array. two \"macro\" dimensions, time spatial. due raster spatial two dimension, data class actually three data-dimensions: (time, x, y). TimeRastArray data class based 4D array. three \"macro\" dimensions: time, spatial, variable. due raster spatial two dimension, data class actually four data-dimensions: (time, x, y, variable).","code":""},{"path":"/reference/TimeRastData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create TimeRastVariable and TimeRastArray data — TimeRastData","text":"","code":"new_TimeRastVariable(data_, Name_, Unit_, Time_, ...)  # S3 method for SpatRaster new_TimeRastVariable(data_, Name_, Unit_, Time_, ...)  # S3 method for array new_TimeRastVariable(data_, Name_, Unit_, Time_, Spat_EPSG, Spat_extent, ...)  new_TimeRastArray(data_, Name_, Unit_, Time_, ...)  # S3 method for SpatRaster new_TimeRastArray(data_, Name_, Unit_, Time_, dim_Time_Vari = c(1, 2), ...)  # S3 method for array new_TimeRastArray(data_, Name_, Unit_, Time_, Spat_EPSG, Spat_extent, ...)"},{"path":"/reference/TimeRastData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create TimeRastVariable and TimeRastArray data — TimeRastData","text":"data_ (num-array terra::SpatRaster) 3D (array) new_TimeRastVariable.array(), must (time, x, y) dimension-order, use function aperm() adjust dimension-order 4D (array) new_TimeRastArray.array(), must (time, x, y, variable) dimension-order, use function aperm() adjust dimension-order (terra::SpatRaster) (multilayer) new_TimeRastVariable.SpatRaster() new_TimeRastArray.SpatRaster(), created terra::rast() Name_, Unit_ (char vector char) name unit Variable, Unit_  units::as_units() Time_ (vector lubridate::timepoint) time dimension, created lubridate::as_date() lubridate::as_datetime() ... parameters Spat_EPSG (integer) EPSG code CRS (Coordinate Reference System) Spat_extent (vector numric), extension Raster c(xmin, xmax, ymin, ymax), can projected east- north-meter global longitude- latitude-degree dim_Time_Vari order time- variable-dimenion layer terra::rast, must c(1, 2): first time variable c(2, 1): first variable time, default c(1, 2)","code":""},{"path":"/reference/TimeRastData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create TimeRastVariable and TimeRastArray data — TimeRastData","text":"TimeRastVariable, TimeRastArray data","code":""},{"path":"/reference/TimeRastLayerData.html","id":null,"dir":"Reference","previous_headings":"","what":"create TimeRastLayerVariable and TimeRastLayerArray data — TimeRastLayerData","title":"create TimeRastLayerVariable and TimeRastLayerArray data — TimeRastLayerData","text":"TimeRastLayerVariable data class based 3D array. two \"macro\" dimensions, time spatial. due raster spatial two dimension vertical layer, data class actually four data-dimensions: (time, x, y, layer). TimeRastLayerArray data class based 4D array. three \"macro\" dimensions: time, spatial, variable. due raster spatial two dimension vertical layer, data class actually five data-dimensions: (time, x, y, layer, variable).","code":""},{"path":"/reference/TimeRastLayerData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create TimeRastLayerVariable and TimeRastLayerArray data — TimeRastLayerData","text":"","code":"new_TimeRastLayerVariable(data_, Name_, Unit_, Time_, ...)  # S3 method for SpatRaster new_TimeRastLayerVariable(   data_,   Name_,   Unit_,   Time_,   n_Layer,   dim_Time_Layer = c(1, 2),   ... )  # S3 method for array new_TimeRastLayerVariable(   data_,   Name_,   Unit_,   Time_,   Spat_EPSG,   Spat_extent,   n_Layer,   ... )  new_TimeRastLayerArray(data_, Name_, Unit_, Time_, ...)  # S3 method for SpatRaster new_TimeRastLayerArray(   data_,   Name_,   Unit_,   Time_,   n_Layer,   dim_Time_Layer_Vari = c(1, 2, 3),   ... )  # S3 method for array new_TimeRastLayerArray(   data_,   Name_,   Unit_,   Time_,   Spat_EPSG,   Spat_extent,   n_Layer,   ... )"},{"path":"/reference/TimeRastLayerData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create TimeRastLayerVariable and TimeRastLayerArray data — TimeRastLayerData","text":"data_ (num-array terra::SpatRaster) 4D (array) new_TimeRastLayerVariable.array(), must (time, x, y, layer) dimension-order, use function aperm() adjust dimension-order 5D (array) new_TimeRastLayerArray.array(), must (time, x, y, layer, variable) dimension-order, use function aperm() adjust dimension-order (terra::SpatRaster) (multilayer) new_TimeRastVariable.SpatRaster(), created terra::rast() Name_, Unit_ (char) name unit Variable, Unit_  units::as_units() Time_ (vector lubridate::timepoint) time dimension, created lubridate::as_date() lubridate::as_datetime() ... parameters n_Layer (integer) number data layers dim_Time_Layer order time- variable-dimenion layer terra::rast, must c(1, 2): first time layer c(2, 1): first layer time, default c(1, 2) Spat_EPSG (integer) EPSG code CRS (Coordinate Reference System) Spat_extent (vector numric), extension Raster c(xmin, xmax, ymin, ymax), can projected east- north-meter global longitude- latitude-degree dim_Time_Layer_Vari order time- variable-dimenion layer terra::rast, must c(1, 2, 3), c(1, 3, 2): first time layer variable, c(2, 1, 3), c(2, 3, 1): first layer time variable, c(3, 1, 2), c(3, 2, 1): first variable time layer, default c(1, 2, 3)","code":""},{"path":"/reference/TimeRastLayerData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create TimeRastLayerVariable and TimeRastLayerArray data — TimeRastLayerData","text":"TimeRastLayerVariable TimeRastLayerArray data","code":""},{"path":[]},{"path":[]},{"path":"/reference/TimeSpatData-package.html","id":"macro-dimensions-dim-","dir":"Reference","previous_headings":"","what":"Macro dimensions (Dim)","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"macro perspective, TimeSpatData always defined three dimensions: Time: timestamps Spat: spatial Vari: multiple variables However, Spat dimension actually different complex form, based geological data raster vector. vertical direction, support layer dimension. physical vertical dimension like x y, rather extracted layer homogeneous layer.","code":""},{"path":"/reference/TimeSpatData-package.html","id":"data-structure-array-dimensions-dim-","dir":"Reference","previous_headings":"","what":"Data structure (array) dimensions (dim)","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"data-processing -storage, data always given array form, macro dimensions clearly defined array dimension, therefore array dimensions redefined:","code":""},{"path":"/reference/TimeSpatData-package.html","id":"time","dir":"Reference","previous_headings":"","what":"time","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"Dimension time defined time backward consistency. always stands first dimension, two possible options: continuous: fixed time step, defined units original_time discrete: Without concept time step, always giving exact timestamps","code":""},{"path":"/reference/TimeSpatData-package.html","id":"spat-in-horizontal","dir":"Reference","previous_headings":"","what":"spat in horizontal","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"Dimension spat defined vector spatial data (points, lines, polygons). ordinal, linked Spat_ID Spat_Data variables. coordinate reference system (CRS) defined using EPSG-code.","code":""},{"path":"/reference/TimeSpatData-package.html","id":"x-und-y-in-horizontal","dir":"Reference","previous_headings":"","what":"x und y in horizontal","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"Die beide Dimensionen sind für Raster (einzeln Schichten) horizontal Koordinate definiert mit die Koordinaten-Werten von zentralen Punkten des Zells. Das CRS ist mit EPSG-code definiert. Deshalb ist es nicht erlaubt die Einheit oder andere zusätzliche Sachen von den beiden Dimensionen zu definieren. two dimensions x y defined raster data single layers. represent horizontal coordinates central points cells raster. coordinate reference system (CRS) defined using EPSG-code. allowed define units additional information dimensions.","code":""},{"path":"/reference/TimeSpatData-package.html","id":"layer-in-vertical","dir":"Reference","previous_headings":"","what":"layer in vertical","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"Dimension layer defined conceptual layer without exact vertical position.","code":""},{"path":"/reference/TimeSpatData-package.html","id":"vari","dir":"Reference","previous_headings":"","what":"vari","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"Dimension vari defined multiple corresponding variables Name Unit. dimension always stands last.","code":""},{"path":"/reference/TimeSpatData-package.html","id":"data-type-name-","dir":"Reference","previous_headings":"","what":"Data type (name)","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"Spat Due variety spatial data forms, four Spat-Form listed : Vect [spat]: Vector data (points, lines, polygons) VectLayer [spat, layer]: Vector data multiple layers Rast [x, y]: Raster data single layer RastLayer [x, y, layer]: Raster data multiple layers Vari Due different properties variables, following four Vari-Form defined: Vari [vari = 1] / []: single variable Array [vari]: multiple variables data-structure -size summary, complete TimeSpatData must define three macro dimensions (data dimensions).","code":""},{"path":"/reference/TimeSpatData-package.html","id":"timespatdata-in-netcdf","dir":"Reference","previous_headings":"","what":"TimeSpatData in NetCDF","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"definition dimensions NetCDF remains data structure dimensions described . Due limits NetCDF, also necessary define additional dimensions, variables, attributes.","code":""},{"path":"/reference/TimeSpatData-package.html","id":"processing-tools","dir":"Reference","previous_headings":"","what":"Processing Tools","title":"basic concept of TimeSpatData — TimeSpatData-package","text":"TSD structure, four main tools: read, write, crop, extract. details, see section read_tsd, write_tsd, crop_tsd extract_tsd.","code":""},{"path":"/reference/TimeVectData.html","id":null,"dir":"Reference","previous_headings":"","what":"create TimeVectVariable and TimeVectArray data — TimeVectData","title":"create TimeVectVariable and TimeVectArray data — TimeVectData","text":"TimeVectVariable data class based 2D array. two dimensions: time spatial. spatial dimension also holds geological vector data (points, lines, polygons) saved Spat_Data. TimeVectArray data class based 3D array. three dimensions: time, spatial, variable. spatial dimension also holds geological vector data (points, lines, polygons) saved Spat_Data.","code":""},{"path":"/reference/TimeVectData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create TimeVectVariable and TimeVectArray data — TimeVectData","text":"","code":"new_TimeVectVariable(   data_,   Name_,   Unit_,   Time_,   Spat_ID,   Spat_Data,   na_check = FALSE )  new_TimeVectArray(   data_,   Name_,   Unit_,   Time_,   Spat_ID,   Spat_Data,   na_check = FALSE )"},{"path":"/reference/TimeVectData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create TimeVectVariable and TimeVectArray data — TimeVectData","text":"data_ (num-array) 2D TimeVectVariable 3D TimeVectArray Name_, Unit_ (char vector char) name unit Variable, Unit_ converted units::as_units() Time_ (vector lubridate::timepoint) time dimension, created lubridate::as_date() lubridate::as_datetime() Spat_ID (vector char) identifying spatial-dimension, must contained Spat_Data Spat_Data (terra::SpatVector) geological data, create terra::vect(), must contain key (attribute) named \"Spat_ID\" na_check (bool) check NAs","code":""},{"path":"/reference/TimeVectLayerData.html","id":null,"dir":"Reference","previous_headings":"","what":"create TimeVectLayerVariable and TimeVectLayerArray data — TimeVectLayerData","title":"create TimeVectLayerVariable and TimeVectLayerArray data — TimeVectLayerData","text":"TimeVectLayerVariable data class based 3D array. two \"macro\" dimensions: time spatial. spatial dimension also holds geological vector data (points, lines, polygons) saved Spat_Data. due vertical layer spatial dimension, data class actually three data-dimensions: (time, spat, layer). TimeVectLayerArray data class based 4D array. three dimensions: time, spatial, variable. spatial dimension also holds geological vector data (points, lines, polygons) saved Spat_Data. due vertical layer spatial dimension, data class actually four data-dimensions: (time, spat, layer, variable).","code":""},{"path":"/reference/TimeVectLayerData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create TimeVectLayerVariable and TimeVectLayerArray data — TimeVectLayerData","text":"","code":"new_TimeVectLayerVariable(   data_,   Name_,   Unit_,   Time_,   Spat_ID,   Spat_Data,   na_check = FALSE )  new_TimeVectLayerArray(   data_,   Name_,   Unit_,   Time_,   Spat_ID,   Spat_Data,   na_check = FALSE )"},{"path":"/reference/TimeVectLayerData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create TimeVectLayerVariable and TimeVectLayerArray data — TimeVectLayerData","text":"data_ (num-array) 3D TimeVectLayerVariable 4D TimeVectLayerArray Name_, Unit_ (char vector char) name unit Variable, Unit_ converted units::as_units() Time_ (vector lubridate::timepoint) time dimension, created lubridate::as_date() lubridate::as_datetime() Spat_ID (vector char) identifying spatial-dimension, must contained Spat_Data Spat_Data (terra::SpatVector) geological data, create terra::vect() na_check (bool) check NAs","code":""},{"path":"/reference/write_tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"write TimeSpatData — write_tsd","title":"write TimeSpatData — write_tsd","text":"Write TimeSpatData nc-file.","code":""},{"path":"/reference/write_tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write TimeSpatData — write_tsd","text":"","code":"write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeVectVariable write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeVectArray write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeVectLayerVariable write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeVectLayerArray write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeRastVariable write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeRastArray write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeRastLayerVariable write_tsd(data_, fn_, other_Attr = NULL)  # S3 method for TimeRastLayerArray write_tsd(data_, fn_, other_Attr = NULL)"},{"path":"/reference/write_tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write TimeSpatData — write_tsd","text":"data_ TimeSpatData data TimeVectVariable TimeVectArray TimeVectLayerVariable TimeVectLayerArray TimeRastVariable TimeRastArray TimeRastLayerVariable TimeRastLayerArray fn_ (char) filenames other_Attr (vector named char) global attributes","code":""}]
