install.packages("styler")
library(units)
dplyr::nth
library(glue)
library(rlang)
stop_dim_n_false <- function(n_) {
abort(
.subclass = "tvd_stop_dim_n_false",
n_ = n_[1],
n_must = n_[2]
)
}
conditionMessage.fs_error_not_found <- function(n_, n_must) {
glue::glue_data(c, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
}
stop_dim_n_false(c(1,2))
rlang::last_error()
conditionMessage.tvd_stop_dim_n_false <- function(n_, n_must) {
glue::glue_data(c, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
}
stop_dim_n_false(c(1,2))
conditionMessage.tvd_stop_dim_n_false <- function(c) {
glue::glue_data(c, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
}
stop_dim_n_false(c(1,2))
`rlang::last_error()`
glue_data(c, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
glue::glue_data(c(1,2), "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
glue::glue_data(c(n_must = 1,n_ = 2), "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
conditionMessage.tvd_stop_dim_n_false <- function(n_) {
glue::glue_data(n_, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
}
stop_dim_n_false <- function(n_) {
abort(
.subclass = "tvd_stop_dim_n_false",
n_ = n_[1],
n_must = n_[2]
)
}
conditionMessage.tvd_stop_dim_n_false <- function(n_) {
glue::glue_data(n_, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
}
stop_dim_n_false(c(1,2))
`rlang::last_error()`
rlang::last_error()
rlang::last_trace()
abort(
.subclass = "tvd_stop_dim_n_false",
n_ = n_[1],
n_must = n_[2]
)
n_=c(1,2)
abort(
.subclass = "tvd_stop_dim_n_false",
n_ = n_[1],
n_must = n_[2]
)
stop_dim_n_false <- function(n_) {
abort(
.subclass = "tvd_stop_dim_n_false",
n_ = n_
)
}
conditionMessage.tvd_stop_dim_n_false <- function(n_) {
glue::glue_data(n_, "`ary_Data` must have  dimensions, not '{n_}'.")
}
stop_dim_n_false(1)
n_ = 1
abort(
.subclass = "tvd_stop_dim_n_false",
n_ = n_
)
conditionMessage.tvd_stop_dim_n_false <- function(n_) {
glue::glue_data(n_, "`ary_Data` must have  dimensions, not '{n_}'.")
}
glue::glue_data(n_, "`ary_Data` must have  dimensions, not '{n_}'.")
n_
stop_not_found <- function(path) {
abort(
.subclass = "fs_error_not_found",
path = path
)
}
#' @export
conditionMessage.fs_error_not_found <- function(c) {
glue::glue_data(c, "'{path}' not found")
}
stop_not_found("a.csv")
rlang::last_error()
try_abort <- function(a){
if(a==1) {
stop_not_found("a.a")
}
}
try_abort(1)
rlang::last_error()
rlang::last_trace()
stop_not_found("a.csv")
abort("a")
stop_not_found <- function(path) {
abort(
class = "fs_error_not_found",
path = path
)
}
#' @export
conditionMessage.fs_error_not_found <- function(c) {
glue::glue_data(c, "'{path}' not found")
}
try_abort <- function(a){
if(a==1) {
stop_not_found("a.a")
}
}
try_abort(1)
stop_not_found("a.csv")
conditionMessage.fs_error_not_found(c(path = "a.csv"))
conditionMessage.tvd_stop_dim_n_false <- function(n_) {
lst_glue <- list(n_ = n_[1], n_must = n_[2])
glue::glue_data(lst_glue, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
}
stop_dim_n_false <- function(n_) {
abort(conditionMessage.tvd_stop_dim_n_false(n_))
}
conditionMessage.tvd_stop_dim_n_false <- function(n_) {
lst_glue <- list(n_ = n_[1], n_must = n_[2])
glue::glue_data(lst_glue, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'.")
}
stop_dim_n_false(c(1,2))
stop_dim_n_false <- function(n_) {
abort(
.subclass = "tvd_stop_dim_n_false",
n_ = n_
)
}
stop_dim_n_false(c(1,2))
stop_dim_n_false <- function(n_) {
abort(
class = "tvd_stop_dim_n_false",
n_ = n_
)
}
stop_dim_n_false(c(1,2))
stop_dim_n_false <- function(n_, n_must) {
lst_glue <- list(n_ = n_, n_must = n_must)
abort(glue_data(lst_glue, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'."))
}
stop_dim_n_false(1,2)
check_dim_tvd <- function(ary_Data, n_dim_must) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
if (n_dim != n_dim_must) {
abort(glue("`ary_Data` must have '{n_dim_must}' dimensions, not '{n_dim}'."))
}
}
check_dim_tvd(array(1:6, dim = c(2,3)), 3)
check_dim_tvd <- function(ary_Data, n_dim_must) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
if (n_dim != n_dim_must) {
abort(glue_col("`ary_Data` must have '{red n_dim_must}' dimensions, not '{blue n_dim}'."), .literal = TRUE)
}
}
check_dim_tvd(array(1:6, dim = c(2,3)), 3)
check_dim_tvd <- function(ary_Data, n_dim_must) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
if (n_dim != n_dim_must) {
abort(glue_col("`ary_Data` must have {red {n_dim_must}} dimensions, not {blue {n_dim}}."), .literal = TRUE)
}
}
check_dim_tvd(array(1:6, dim = c(2,3)), 3)
library(lubridate)
class(as_date)
class(as_date(1))
class(as_datetime(1))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red {dim_time_ary}}] must match with `Time_` [{red {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c#(2,3)), as_date(1:3))
)
Q
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red {dim_time_ary}}] must match with `Time_` [{red {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [n = {red {dim_time_ary}}] must match with `Time_` [n = {red {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red n = {dim_time_ary}}] must match with `Time_` [{red n = {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim(array(1:6, c(2,3)), (1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}. Try to use the functions {green lubridate::as_date()} or {green lubridate::as_datetime}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red n = {dim_time_ary}}] must match with `Time_` [{red n = {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), (1:3))
library(purrr)
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:2)
rlang::last_error()
u = as_units("kg m-2 s-1", implicit_exponents = TRUE)
u
deparse_unit(u)
u = as_units("°C")
u
deparse_unit(u)
u = as_units(c("°C", "km^2"))
valid_udunits()
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
for (i in 1:n_unit) {
tryCatch(as_units(Unit_[i]),
abort(glue_col("`Unit_` must be able to convernt to a {red units::unit}, try the functopn {green units::valid_udunits()} and {green units::valid_udunits_prefixes()}."), .literal = TRUE)
)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:2)
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:3)
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
for (i in 1:n_unit) {
unit_check <- Unit_[i]
tryCatch(as_units(unit_check),
abort(glue_col("{red '{unit_check}'} can't be  convernt to a {blue units::unit}, try to check unit with the function {green units::as_unit()} and show more pre-defined units from UDUNITS2 with {green units::valid_udunits()} and {green units::valid_udunits_prefixes()}."), .literal = TRUE)
)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:3)
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
for (i in 1:n_unit) {
unit_check <- Unit_[i]
tryCatch(as_units(unit_check),
abort(glue_col("{red '{unit_check}'} (in `Unit_`) can't be  convernt to a {blue units::unit}, try to check unit with the function {green units::as_unit()} and show more pre-defined units from UDUNITS2 with {green units::valid_udunits()} and {green units::valid_udunits_prefixes()}."), .literal = TRUE)
)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:3)
check_dim_spat <- function(ary_Data, Spat_ID, Spat_Data) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_spat_ary <- dim_Data[2]
if(!(isClass(Spat_Data, "SpatVector") && "Spat_ID" %in% names(Spat_Data))) {
abort(glue_col("The class of `Spat_Data` be {red 'terra::SpatVector'}, please use the function {green terra::vect()}.\nAnd the `Spat_Data` must contian the Field named as {red 'Spat_ID'}, which match with `Spat_ID`."), .literal = TRUE)
}
if(!all(Spat_ID %in% Spat_Data$Spat_ID)) {
abort(glue_col("All of the names in `Spat_ID` must be contianed in 'Spat_ID' of `Spat_Data`."), .literal = TRUE)
}
}
check_dim_spat(array(1:6, c(2,3)), 1, 2)
check_dim_spat <- function(ary_Data, Spat_ID, Spat_Data) {
if(!(isClass(Spat_Data, "SpatVector") && "Spat_ID" %in% names(Spat_Data))) {
abort(glue_col("The class of `Spat_Data` be {red 'terra::SpatVector'}, please use the function {green terra::vect()}.\nAnd the `Spat_Data` must contian the Field named as {red 'Spat_ID'}, which match with `Spat_ID`."), .literal = TRUE)
}
if(!all(Spat_ID %in% Spat_Data$Spat_ID)) {
abort(glue_col("All of the names in `Spat_ID` must be contianed in 'Spat_ID' of `Spat_Data`."), .literal = TRUE)
}
}
check_dim_spat(array(1:6, c(2,3)), 1, "2")
warn(glue_col("The reselutiona are:\n{blue x: {res_x}}\n{blue y: {res_y}}\n{red They will not be checked, please make sure they are correct}."))
res_x=1
res_y = 2
warn(glue_col("The reselutiona are:\n{blue x: {res_x}}\n{blue y: {res_y}}\n{red They will not be checked, please make sure they are correct}."))
inform(glue_col("The reselutiona are:\n{blue x: {res_x}}\n{blue y: {res_y}}\n{red They will not be checked, please make sure they are correct}."))
anyDuplicated("a","a")
anyDuplicated("a","b")
anyDuplicated(c("a","b"))
anyDuplicated(c("a","a"))
as_name(c("a","a"))
test <- c(1:5, 3:7, 5:9)
duplicated(test)
test
Name_ = c("c", "a", "a")
if (any(duplicated(Name_))) {
dp_name <- paste(Name_[duplicated(Name_)], sep = ", ")
abort(glue_col("`Name_` must be uniqued, but these {red {dp_name}} are repeatedd."), .literal = TRUE)
}
Name_ = c("c", "a", "a", "c")
if (any(duplicated(Name_))) {
dp_name <- paste(Name_[duplicated(Name_)], sep = ", ")
abort(glue_col("`Name_` must be uniqued, but these {red {dp_name}} are repeatedd."), .literal = TRUE)
}
if (any(duplicated(Name_))) {
dp_name <- paste(Name_[duplicated(Name_)], collapse = ", ")
abort(glue_col("`Name_` must be uniqued, but these {red {dp_name}} are repeatedd."), .literal = TRUE)
}
?aperm
?abort
??abort
unique(c(1,2,1))
unique(c(1,2,1)) == c(1,2)
unique(c(1,2,1)) == c(2,1)
unique(c(2,1)) == c(2,1)
c(1,2) |> sort() == c(1,2)
c(1,2,3) |> sort() == c(1,2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
