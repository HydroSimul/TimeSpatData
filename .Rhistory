class = "tvd_stop_dim_n_false",
n_ = n_
)
}
stop_dim_n_false(c(1,2))
stop_dim_n_false <- function(n_, n_must) {
lst_glue <- list(n_ = n_, n_must = n_must)
abort(glue_data(lst_glue, "`ary_Data` must have '{n_must}' dimensions, not '{n_}'."))
}
stop_dim_n_false(1,2)
check_dim_tvd <- function(ary_Data, n_dim_must) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
if (n_dim != n_dim_must) {
abort(glue("`ary_Data` must have '{n_dim_must}' dimensions, not '{n_dim}'."))
}
}
check_dim_tvd(array(1:6, dim = c(2,3)), 3)
check_dim_tvd <- function(ary_Data, n_dim_must) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
if (n_dim != n_dim_must) {
abort(glue_col("`ary_Data` must have '{red n_dim_must}' dimensions, not '{blue n_dim}'."), .literal = TRUE)
}
}
check_dim_tvd(array(1:6, dim = c(2,3)), 3)
check_dim_tvd <- function(ary_Data, n_dim_must) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
if (n_dim != n_dim_must) {
abort(glue_col("`ary_Data` must have {red {n_dim_must}} dimensions, not {blue {n_dim}}."), .literal = TRUE)
}
}
check_dim_tvd(array(1:6, dim = c(2,3)), 3)
library(lubridate)
class(as_date)
class(as_date(1))
class(as_datetime(1))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red {dim_time_ary}}] must match with `Time_` [{red {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c#(2,3)), as_date(1:3))
)
Q
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red {dim_time_ary}}] must match with `Time_` [{red {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [n = {red {dim_time_ary}}] must match with `Time_` [n = {red {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red n = {dim_time_ary}}] must match with `Time_` [{red n = {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), as_date(1:3))
check_time_dim(array(1:6, c(2,3)), (1:3))
check_time_dim <- function(ary_Data, Time_) {
if (!is.timepoint(Time_)) {
abort(glue_col("The class of `Time_` must be {red 'Date'} or {red 'POSIXct'}. Try to use the functions {green lubridate::as_date()} or {green lubridate::as_datetime}."), .literal = TRUE)
}
dim_Data <- dim(ary_Data)
dim_time_ary <- dim_Data[1]
n_time <- length(Time_)
if (dim_time_ary != n_time) {
abort(glue_col("The time-scale of `ary_Data` [{red n = {dim_time_ary}}] must match with `Time_` [{red n = {n_time}}]."), .literal = TRUE)
}
}
check_time_dim(array(1:6, c(2,3)), (1:3))
library(purrr)
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:2)
rlang::last_error()
u = as_units("kg m-2 s-1", implicit_exponents = TRUE)
u
deparse_unit(u)
u = as_units("°C")
u
deparse_unit(u)
u = as_units(c("°C", "km^2"))
valid_udunits()
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
for (i in 1:n_unit) {
tryCatch(as_units(Unit_[i]),
abort(glue_col("`Unit_` must be able to convernt to a {red units::unit}, try the functopn {green units::valid_udunits()} and {green units::valid_udunits_prefixes()}."), .literal = TRUE)
)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:2)
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:3)
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
for (i in 1:n_unit) {
unit_check <- Unit_[i]
tryCatch(as_units(unit_check),
abort(glue_col("{red '{unit_check}'} can't be  convernt to a {blue units::unit}, try to check unit with the function {green units::as_unit()} and show more pre-defined units from UDUNITS2 with {green units::valid_udunits()} and {green units::valid_udunits_prefixes()}."), .literal = TRUE)
)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:3)
check_dim_vari <- function(ary_Data, Name_, Unit_) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_vari_ary <- dim_Data[n_dim]
n_name <- length(Name_)
n_unit <- length(Unit_)
if (dim_vari_ary != n_name | dim_vari_ary != n_unit) {
abort(glue_col("The variable-scale of `ary_Data` [{red n = {dim_vari_ary}}] must match with `Name_` [{red n = {n_name}}] and `Unit_` [{red n = {n_unit}}]."), .literal = TRUE)
}
for (i in 1:n_unit) {
unit_check <- Unit_[i]
tryCatch(as_units(unit_check),
abort(glue_col("{red '{unit_check}'} (in `Unit_`) can't be  convernt to a {blue units::unit}, try to check unit with the function {green units::as_unit()} and show more pre-defined units from UDUNITS2 with {green units::valid_udunits()} and {green units::valid_udunits_prefixes()}."), .literal = TRUE)
)
}
}
check_dim_vari(array(1:6, c(2,3)), (1:3), 1:3)
check_dim_spat <- function(ary_Data, Spat_ID, Spat_Data) {
dim_Data <- dim(ary_Data)
n_dim <- length(dim_Data)
dim_spat_ary <- dim_Data[2]
if(!(isClass(Spat_Data, "SpatVector") && "Spat_ID" %in% names(Spat_Data))) {
abort(glue_col("The class of `Spat_Data` be {red 'terra::SpatVector'}, please use the function {green terra::vect()}.\nAnd the `Spat_Data` must contian the Field named as {red 'Spat_ID'}, which match with `Spat_ID`."), .literal = TRUE)
}
if(!all(Spat_ID %in% Spat_Data$Spat_ID)) {
abort(glue_col("All of the names in `Spat_ID` must be contianed in 'Spat_ID' of `Spat_Data`."), .literal = TRUE)
}
}
check_dim_spat(array(1:6, c(2,3)), 1, 2)
check_dim_spat <- function(ary_Data, Spat_ID, Spat_Data) {
if(!(isClass(Spat_Data, "SpatVector") && "Spat_ID" %in% names(Spat_Data))) {
abort(glue_col("The class of `Spat_Data` be {red 'terra::SpatVector'}, please use the function {green terra::vect()}.\nAnd the `Spat_Data` must contian the Field named as {red 'Spat_ID'}, which match with `Spat_ID`."), .literal = TRUE)
}
if(!all(Spat_ID %in% Spat_Data$Spat_ID)) {
abort(glue_col("All of the names in `Spat_ID` must be contianed in 'Spat_ID' of `Spat_Data`."), .literal = TRUE)
}
}
check_dim_spat(array(1:6, c(2,3)), 1, "2")
warn(glue_col("The reselutiona are:\n{blue x: {res_x}}\n{blue y: {res_y}}\n{red They will not be checked, please make sure they are correct}."))
res_x=1
res_y = 2
warn(glue_col("The reselutiona are:\n{blue x: {res_x}}\n{blue y: {res_y}}\n{red They will not be checked, please make sure they are correct}."))
inform(glue_col("The reselutiona are:\n{blue x: {res_x}}\n{blue y: {res_y}}\n{red They will not be checked, please make sure they are correct}."))
anyDuplicated("a","a")
anyDuplicated("a","b")
anyDuplicated(c("a","b"))
anyDuplicated(c("a","a"))
as_name(c("a","a"))
test <- c(1:5, 3:7, 5:9)
duplicated(test)
test
Name_ = c("c", "a", "a")
if (any(duplicated(Name_))) {
dp_name <- paste(Name_[duplicated(Name_)], sep = ", ")
abort(glue_col("`Name_` must be uniqued, but these {red {dp_name}} are repeatedd."), .literal = TRUE)
}
Name_ = c("c", "a", "a", "c")
if (any(duplicated(Name_))) {
dp_name <- paste(Name_[duplicated(Name_)], sep = ", ")
abort(glue_col("`Name_` must be uniqued, but these {red {dp_name}} are repeatedd."), .literal = TRUE)
}
if (any(duplicated(Name_))) {
dp_name <- paste(Name_[duplicated(Name_)], collapse = ", ")
abort(glue_col("`Name_` must be uniqued, but these {red {dp_name}} are repeatedd."), .literal = TRUE)
}
?aperm
?abort
??abort
unique(c(1,2,1))
unique(c(1,2,1)) == c(1,2)
unique(c(1,2,1)) == c(2,1)
unique(c(2,1)) == c(2,1)
c(1,2) |> sort() == c(1,2)
c(1,2,3) |> sort() == c(1,2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(TimeSpatData)
a <- c("a", "c")
names(a) <- c("b", "d")
a
b <- c(a = "b", b = "c")
b
str(b)
for (i in b) {
names(i)
}
names(i)
devtools::document()
devtools::document()
devtools::document()
library(TimeSpatData)
devtools::document()
devtools::document()
devtools::document()
library(TimeSpatData)
devtools::build_manual()
library(TimeSpatData)
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
devtools::document()
devtools::document()
library(TimeSpatData)
library(TimeSpatData)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
devtools::document()
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
library(TimeSpatData)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
gh_token_help()
usethis::gh_token_help()
usethis::create_github_token()
usethis::gitcreds_set()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
devtools::document()
knit_with_parameters("E:/Kan_Lei/PACKAGE/TimeSpatData/README.Rmd", encoding = "UTF-8")
pkgdown::build_site()
knitr::plot_crop("man/figures/logo.png")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("vignette-tsd")
library(TimeSpatData)
ary_ET <- read.table(c("ET_1961-01-01.asc", "ET_1961-01-01.asc", "ET_1961-01-01.asc"), skip = 6)
ary_ET <- read.table("ET_1961-01-01.asc", skip = 6)
ary_ET <- read.table(system.file("ET_1961-01-01.asc", paxkage = "TimeSpatData"), skip = 6)
ary_ET <- read.table(system.file("ET_1961-01-01.asc", package = "TimeSpatData"), skip = 6)
library(TimeSpatData)
library(TimeSpatData)
ary_ET <- read.table(system.file("ET_1961-01-01.asc", package = "TimeSpatData"), skip = 6)
system.file("ET_1961-01-01.asc", package = "TimeSpatData")
system.file("extdata\ET_1961-01-01.asc", package = "TimeSpatData")
system.file("extdata\\ET_1961-01-01.asc", package = "TimeSpatData")
ary_ET <- read.table(system.file("extdata\\ET_1961-01-01.asc", package = "TimeSpatData"), skip = 6)
fn_Asc <- system.file("extdata\\*.asc", package = "TimeSpatData")
fn_Asc <- system.file("extdata", package = "TimeSpatData")
fn_Asc <- system.file("extdata", package = "TimeSpatData") |> list.files(".asc")
fp_Extdata <- system.file("extdata", package = "TimeSpatData")
fn_Asc <-  list.files(fp_Extdata, ".asc")
## get the file path and names of raster data (in .asc)
fp_Extdata <- system.file("extdata", package = "TimeSpatData")
fn_Asc <-  list.files(fp_Extdata, ".asc")
## read into array
ary_ET <- read.table(file.path(fp_Extdata, fn_Asc[1:3]), skip = 6) # the first six lines are the metadata
## get the file path and names of raster data (in .asc)
fp_Extdata <- system.file("extdata", package = "TimeSpatData")
fn_Asc <-  list.files(fp_Extdata, ".asc")
## read into array
ary_ET <- apply(file.path(fp_Extdata, fn_Asc[1:3]), 1, read.table, skip = 6)  # the first six lines are the metadata
file.path(fp_Extdata, fn_Asc[1:3])
## read into array
ary_ET <- apply(file.path(fp_Extdata, fn_Asc[1:3]), 0, read.table, skip = 6)  # the first six lines are the metadata
## read into array
ary_ET <- apply(file.path(fp_Extdata, fn_Asc[1:3]), 1, read.table, skip = 6)  # the first six lines are the metadata
## read into array
ary_ET <- lapply(file.path(fp_Extdata, fn_Asc[1:3]), 1, read.table, skip = 6)  # the first six lines are the metadata
## read into array
ary_ET <- lapply(file.path(fp_Extdata, fn_Asc[1:3]), read.table, skip = 6)  # the first six lines are the metadata
## read into array
ary_ET <- lapply(file.path(fp_Extdata, fn_Asc[1:3]), read.table, skip = 6) |> as.array()  # the first six lines are the metadata
## read into array
ary_ET <- rast(file.path(fp_Extdata, fn_Asc[1:3]))  # the first six lines are the metadata
library(terra)
## read into array
ary_ET <- rast(file.path(fp_Extdata, fn_Asc[1:3]))  # the first six lines are the metadata
## read into array
rast_ET <- rast(file.path(fp_Extdata, fn_Asc[1:3]))  # the first six lines are the metadata
ary_ET <- as.array(rast_ET)
str(rast_ET)
library(lubridate)
## get the geological info
ext_Template <- ext(rast_ET)
## convert to TSD
tsd_ET <- new_TimeRastVariable(ary_ET[,,190:1,], # data
"ET", "mm/d", # name and unit
as_date(c("1961-01-01", "1961-01-02", "1961-01-03")), # time
31468, ext_Template) # Spat
## reform the array
ary_ET <- ary_ET[190:1,,] |> aperm(c(3,2,1))
## get the geological info
ext_Template <- ext(rast_ET)
## convert to TSD
tsd_ET <- new_TimeRastVariable(ary_ET, # data
"ET", "mm/d", # name and unit
as_date(c("1961-01-01", "1961-01-02", "1961-01-03")), # time
31468, ext_Template) # Spat
## check
str(tsd_ET)
crs(rast_ET) <- "EPSG:31468"
## convert to TSD
tsd_ET_r <- new_TimeRastVariable(rast_ET, # data
"ET", "mm/d", # name and unit
as_date(c("1961-01-01", "1961-01-02", "1961-01-03"))) # time
## check
str(tsd_ET_r)
pkgdown::build_site()
path_data <- "E:\\Kan_Lei\\CAMELS-SAX\\R_CAMELS_SAX\\data"
fn_EZG_all <- file.path(path_data, "EZG_all")
# Extract -----------
### Polygon
polygon_EZG_all <- vect(fn_EZG_all)
polygon_EZG_all$Spat_ID <- paste0("PID", polygon_EZG_all$MSTNR)
plot(polygon_EZG_all)
polygon_EZG_all
writeVector(polygon_EZG_all[1:2,"Spat_ID"], "shp_SAX_EZG", "GPKG")
writeVector(polygon_EZG_all[1:2,"Spat_ID"], "shp_SAX_EZG.gpkg", "GPKG")
fp_Extdata <- "E:\\Kan_Lei\\PACKAGE\\TimeSpatData\\inst\\extdata"
polygon_SAX <- vect(file.path(fp_Extdata, "shp_SAX_EZG.gpkg"))
polygon_SAX
writeVector(polygon_EZG_all[c(1,10),"Spat_ID"], file.path(fp_Extdata, "shp_SAX_EZG.gpkg"), "GPKG", overwrite = T)
polygon_SAX <- vect(file.path(fp_Extdata, "shp_SAX_EZG.gpkg"))
polygon_SAX
plot(polygon_SAX)
polygon_EZG_all$Spat_ID
writeVector(polygon_EZG_all[c(1,217),"Spat_ID"], file.path(fp_Extdata, "shp_SAX_EZG.gpkg"), "GPKG", overwrite = T)
polygon_SAX <- vect(file.path(fp_Extdata, "shp_SAX_EZG.gpkg"))
polygon_SAX
plot(polygon_SAX)
plot(polygon_SAX[c(1,216),])
plot(polygon_EZG_all[c(1,216),])
plot(polygon_EZG_all[c(1,48),])
plot(polygon_EZG_all[c(1,9),])
writeVector(polygon_EZG_all[c(1,9),"Spat_ID"], file.path(fp_Extdata, "shp_SAX_EZG.gpkg"), "GPKG", overwrite = T)
## load polygon
polygon_SAX <- vect(file.path(fp_Extdata, "shp_SAX_EZG.gpkg"))
## random array data
ary_Q <- array(runif(10, 0, 6), c(5, 2)) # random number for two `Spat` (polygons) and five `Time` (time steps)
## convert to TSD
tsd_Q_v <- new_TimeRastVariable(ary_Q, # data
"Q", "m3/s", # name and unit
as_date(c("1961-01-01", "1961-01-02", "1961-01-03", "1961-01-04", "1961-01-05")), # time
c("PID560051", "PID582820"), # Spat_ID
polygon_SAX)
## convert to TSD
tsd_Q_v <- new_TimeVectVariable(ary_Q, # data
"Q", "m3/s", # name and unit
as_date(c("1961-01-01", "1961-01-02", "1961-01-03", "1961-01-04", "1961-01-05")), # time
c("PID560051", "PID582820"), # Spat_ID
polygon_SAX)
## check
str(tsd_Q_v)
devtools::document()
library(TimeSpatData)
pkgdown::build_site()
pkgdown::build_site()
library(TimeSpatData)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
.Last.error
pkgdown::build_site()
